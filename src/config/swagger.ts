import swaggerJSDoc from 'swagger-jsdoc';

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Beni Mono API',
      version: '1.0.0',
      description: 'Comprehensive API documentation for Beni Mono backend',
    },
    servers: [
      {
        url: 'http://localhost:3000/api',
        description: 'Local server',
      },
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
        },
      },
      schemas: {
        Tenant: {
          type: 'object',
          properties: {
            id: { type: 'string', description: 'Unique identifier', example: 'c123456789' },
            name: { type: 'string', description: 'Tenant name', example: 'My Organization' },
            slug: { type: 'string', description: 'Unique slug', example: 'my-organization' },
            logoUrl: { type: 'string', nullable: true, description: 'URL to logo image', example: 'https://example.com/logo.png' },
            description: { type: 'string', nullable: true, example: 'Description of the organization' },
            contactEmail: { type: 'string', nullable: true, format: 'email', example: 'contact@example.com' },
            contactPhone: { type: 'string', nullable: true, example: '+1234567890' },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
            ownerId: { type: 'string', description: 'ID of the owner user', example: 'user123' },
          },
          required: ['id', 'name', 'slug', 'ownerId'],
        },
        User: {
          type: 'object',
          properties: {
            id: { type: 'string', example: 'user123' },
            email: { type: 'string', format: 'email', example: 'user@example.com' },
            username: { type: 'string', nullable: true, example: 'username1' },
            fullName: { type: 'string', nullable: true, example: 'John Doe' },
            phone: { type: 'string', nullable: true, example: '+1234567890' },
            avatarUrl: { type: 'string', nullable: true, example: 'https://example.com/avatar.png' },
            gender: { type: 'string', nullable: true, enum: ['MALE', 'FEMALE', 'OTHER'] },
            birthdate: { type: 'string', format: 'date', nullable: true },
            bio: { type: 'string', nullable: true },
            location: { type: 'object', nullable: true },
            social: { type: 'object', nullable: true },
            isEmailVerified: { type: 'boolean' },
            isPhoneVerified: { type: 'boolean' },
            lastLoginAt: { type: 'string', format: 'date-time', nullable: true },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
          },
          required: ['id', 'email', 'isEmailVerified', 'isPhoneVerified', 'createdAt', 'updatedAt'],
        },
        Product: {
          type: 'object',
          properties: {
            id: { type: 'string', example: 'prod123' },
            name: { type: 'string', example: 'Sample Hotel' },
            description: { type: 'string', nullable: true },
            category: { type: 'string', example: 'hotel' },
            subCategory: { type: 'string', nullable: true },
            type: { type: 'string', enum: ['HOTEL', 'ACCOMMODATION', 'TOUR', 'ACTIVITY', 'OTHER'] },
            province: { type: 'string', example: 'Tehran' },
            city: { type: 'string', example: 'Tehran' },
            address: { type: 'string', nullable: true },
            locationLat: { type: 'number', nullable: true },
            locationLng: { type: 'number', nullable: true },
            availableQty: { type: 'integer' },
            reservedQty: { type: 'integer' },
            price: { type: 'integer' },
            discount: { type: 'integer', nullable: true },
            finalPrice: { type: 'integer' },
            isActive: { type: 'boolean' },
            isSuspended: { type: 'boolean' },
            createdById: { type: 'string' },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
            images: { type: 'array', items: { type: 'string' }, nullable: true },
          },
          required: ['id', 'name', 'category', 'type', 'province', 'city', 'availableQty', 'reservedQty', 'price', 'finalPrice', 'isActive', 'isSuspended', 'createdById', 'createdAt', 'updatedAt'],
        },
        Reservation: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            userId: { type: 'string' },
            productId: { type: 'string' },
            quantity: { type: 'integer' },
            status: { type: 'string', enum: ['PENDING', 'PAID', 'CANCELLED', 'FAILED', 'EXPIRED', 'ON_HOLD'] },
            paymentId: { type: 'string', nullable: true },
            paymentMethod: { type: 'string', nullable: true },
            paymentStatus: { type: 'string', enum: ['PAID', 'UNPAID', 'FAILED', 'REFUNDED', 'WAITING'] },
            paidAt: { type: 'string', format: 'date-time', nullable: true },
            cancelledAt: { type: 'string', format: 'date-time', nullable: true },
            startDate: { type: 'string', format: 'date-time', nullable: true },
            endDate: { type: 'string', format: 'date-time', nullable: true },
            notes: { type: 'string', nullable: true },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
            tripId: { type: 'string', nullable: true },
          },
          required: ['id', 'userId', 'productId', 'quantity', 'status', 'paymentStatus', 'createdAt', 'updatedAt'],
        },
        Subscription: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            tenantId: { type: 'string' },
            planId: { type: 'string' },
            startedAt: { type: 'string', format: 'date-time' },
            expiresAt: { type: 'string', format: 'date-time' },
            status: { type: 'string', enum: ['ACTIVE', 'EXPIRED', 'CANCELLED'] },
            renewalEnabled: { type: 'boolean' },
            paymentMethod: { type: 'string', nullable: true },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
          },
          required: ['id', 'tenantId', 'planId', 'startedAt', 'expiresAt', 'status', 'renewalEnabled', 'createdAt', 'updatedAt'],
        },
        ApiKey: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            key: { type: 'string' },
            name: { type: 'string' },
            description: { type: 'string', nullable: true },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
            expiresAt: { type: 'string', format: 'date-time', nullable: true },
            revokedAt: { type: 'string', format: 'date-time', nullable: true },
            isActive: { type: 'boolean' },
            ipWhitelist: { type: 'array', items: { type: 'string' } },
            metadata: { type: 'object', nullable: true },
            createdById: { type: 'string' },
            tenantId: { type: 'string' },
          },
          required: ['id', 'key', 'name', 'createdAt', 'updatedAt', 'isActive', 'ipWhitelist', 'createdById', 'tenantId'],
        },
        Role: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            name: { type: 'string' },
            description: { type: 'string', nullable: true },
            isGlobal: { type: 'boolean' },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
          },
          required: ['id', 'name', 'isGlobal', 'createdAt', 'updatedAt'],
        },
        Permission: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            name: { type: 'string' },
            action: { type: 'string' },
            resource: { type: 'string' },
            description: { type: 'string', nullable: true },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
          },
          required: ['id', 'name', 'action', 'resource', 'createdAt', 'updatedAt'],
        },
        Payment: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            userId: { type: 'string' },
            amount: { type: 'integer' },
            currency: { type: 'string' },
            status: { type: 'string', enum: ['PENDING', 'SUCCESS', 'FAILED', 'CANCELED', 'EXPIRED'] },
            provider: { type: 'string', enum: ['ZARINPAL', 'IDPAY', 'STRIPE', 'PAYPAL', 'MANUAL'] },
            referenceId: { type: 'string', nullable: true },
            authorityCode: { type: 'string', nullable: true },
            trackingCode: { type: 'string', nullable: true },
            purpose: { type: 'string', enum: ['SUBSCRIPTION', 'PRODUCT', 'TRIP_RESERVATION', 'DONATION'] },
            targetId: { type: 'string', nullable: true },
            description: { type: 'string', nullable: true },
            isVerified: { type: 'boolean' },
            verifiedAt: { type: 'string', format: 'date-time', nullable: true },
            failedAt: { type: 'string', format: 'date-time', nullable: true },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
          },
          required: ['id', 'userId', 'amount', 'currency', 'status', 'provider', 'purpose', 'isVerified', 'createdAt', 'updatedAt'],
        },
        Invoice: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            tenantId: { type: 'string' },
            amount: { type: 'integer' },
            currency: { type: 'string' },
            status: { type: 'string' },
            issuedAt: { type: 'string', format: 'date-time' },
            paidAt: { type: 'string', format: 'date-time', nullable: true },
            dueDate: { type: 'string', format: 'date-time' },
            description: { type: 'string', nullable: true },
            referenceId: { type: 'string', nullable: true },
            gateway: { type: 'string', nullable: true },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
          },
          required: ['id', 'tenantId', 'amount', 'currency', 'status', 'issuedAt', 'dueDate', 'createdAt', 'updatedAt'],
        },
        LoginLog: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            userId: { type: 'string' },
            ipAddress: { type: 'string', nullable: true },
            userAgent: { type: 'string', nullable: true },
            status: { type: 'string', enum: ['SUCCESS', 'FAILURE'] },
            reason: { type: 'string', nullable: true },
            createdAt: { type: 'string', format: 'date-time' },
          },
          required: ['id', 'userId', 'status', 'createdAt'],
        },
        AuditLog: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            tenantId: { type: 'string', nullable: true },
            actorId: { type: 'string', nullable: true },
            actorType: { type: 'string' },
            action: { type: 'string' },
            target: { type: 'string', nullable: true },
            ipAddress: { type: 'string', nullable: true },
            userAgent: { type: 'string', nullable: true },
            metadata: { type: 'object', nullable: true },
            createdAt: { type: 'string', format: 'date-time' },
          },
          required: ['id', 'actorType', 'action', 'createdAt'],
        },
        ApiUsageLog: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            timestamp: { type: 'string', format: 'date-time' },
            endpoint: { type: 'string' },
            method: { type: 'string' },
            statusCode: { type: 'integer' },
            responseTimeMs: { type: 'integer', nullable: true },
            ipAddress: { type: 'string', nullable: true },
            userAgent: { type: 'string', nullable: true },
            country: { type: 'string', nullable: true },
            city: { type: 'string', nullable: true },
            isRateLimited: { type: 'boolean' },
            apiKeyId: { type: 'string', nullable: true },
            userId: { type: 'string', nullable: true },
            tenantId: { type: 'string', nullable: true },
            apiKeyDirectId: { type: 'string', nullable: true },
          },
          required: ['id', 'timestamp', 'endpoint', 'method', 'statusCode', 'isRateLimited'],
        },
        Session: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            userId: { type: 'string' },
            token: { type: 'string' },
            ip: { type: 'string', nullable: true },
            userAgent: { type: 'string', nullable: true },
            createdAt: { type: 'string', format: 'date-time' },
            lastActive: { type: 'string', format: 'date-time' },
          },
          required: ['id', 'userId', 'token', 'createdAt', 'lastActive'],
        },
        UsageRecord: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            tenantId: { type: 'string' },
            userId: { type: 'string' },
            apiKeyId: { type: 'string', nullable: true },
            service: { type: 'string' },
            usageType: { type: 'string' },
            amount: { type: 'integer' },
            metadata: { type: 'object', nullable: true },
            timestamp: { type: 'string', format: 'date-time' },
          },
          required: ['id', 'tenantId', 'userId', 'service', 'usageType', 'amount', 'timestamp'],
        },
        Webhook: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            tenantId: { type: 'string' },
            url: { type: 'string' },
            eventTypes: { type: 'array', items: { type: 'string' } },
            secret: { type: 'string' },
            isActive: { type: 'boolean' },
            lastTriggered: { type: 'string', format: 'date-time', nullable: true },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
          },
          required: ['id', 'tenantId', 'url', 'eventTypes', 'secret', 'isActive', 'createdAt', 'updatedAt'],
        },
        WebhookDelivery: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            webhookId: { type: 'string' },
            event: { type: 'string' },
            statusCode: { type: 'integer', nullable: true },
            success: { type: 'boolean' },
            requestBody: { type: 'object', nullable: true },
            responseBody: { type: 'object', nullable: true },
            deliveredAt: { type: 'string', format: 'date-time' },
          },
          required: ['id', 'webhookId', 'event', 'success', 'deliveredAt'],
        },
      },
    },
    security: [{ bearerAuth: [] }],
  },
  apis: [
    './src/routes/**/*.ts',
    './src/controllers/**/*.ts',
    // Add model schemas here if you use a models directory for JSDoc definitions
    './src/models/**/*.ts',
    // './src/schemas/**/*.ts', // Uncomment if you use a schemas directory
  ],
};

const swaggerSpec = swaggerJSDoc(options);
export default swaggerSpec;
